<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1484905698328">{:repl-history {:ide [], :local [&quot;(ns bc-module-kenya.helper-fns\n  ^{:author \&quot;pmuchina@mo-de.com\&quot;}\n  (:require [bc-module-kenya.config :as config]\n            [clojure.tools.logging :as log]\n            [cheshire.core :refer :all]\n            [clj-http.client :as req]\n            )\n  )&quot; &quot;(def details (parse-string \&quot;{\\\&quot;foo\\\&quot;:\\\&quot;bar\\\&quot;}\&quot;))&quot; &quot;(details \&quot;foo\&quot;)&quot; &quot;(defn send_to_kannel\n  [obj]\n  ;;get url from config and populate msisdn value to get url\n  (def details (parse-string obj))\n  (let [url (format config/kannel-url config/kannel-user config/kannel-pass (obj :msidn) (obj :message) config/from)]\n    ;;send request\n    (println url)\n    ;;(log/debug url)\n    ;;(req/get url)\n    )\n  )&quot; &quot;(message :msisdn)&quot; &quot;(:msisdn message)&quot; &quot;(def details (parse-string obj))&quot; &quot;(defn send_to_kannel\n  [obj]\n  ;;get url from config and populate msisdn value to get url\n  (def details (parse-string obj))\n  (let [url (format config/kannel-url config/kannel-user config/kannel-pass (:msisdn obj) (:message obj) config/from)]\n    ;;send request\n    (println url)\n    ;;(log/debug url)\n    ;;(req/get url)\n    )\n  )&quot; &quot;(def details (parse-string message))&quot; &quot;details&quot; &quot;(defn send_to_kannel\n  [obj]\n  ;;get url from config and populate msisdn value to get url\n  (def details (parse-string obj))\n  (let [url (format config/kannel-url config/kannel-user config/kannel-pass (:msisdn details) (:message details) config/from)]\n    ;;send request\n    (println url)\n    ;;(log/debug url)\n    ;;(req/get url)\n    )\n  )&quot; &quot;(defn send_to_kannel\n  [obj]\n  ;;get url from config and populate msisdn value to get url\n  (def details (parse-string obj))\n  (let [url (format config/kannel-url config/kannel-user config/kannel-pass (details :msisdn ) (details :message ) config/from)]\n    ;;send request\n    (println url)\n    ;;(log/debug url)\n    ;;(req/get url)\n    )\n  )&quot; &quot;(def message (generate-string {:session-id 1235 :request-id 123 :msisdn 123 :message \&quot;Hello my old friend\&quot; :flash? false :from \&quot;Airtel\&quot;}))&quot; &quot;(def details (generate-string {:session-id 1235 :request-id 123 :msisdn 123 :message \&quot;Hello my old friend\&quot; :flash? false :from \&quot;Airtel\&quot;}))&quot; &quot;(details :msisdn )&quot; &quot;(parse-string details)&quot; &quot;(def mess (parse-string details))&quot; &quot;(mess :msisdn)&quot; &quot;(:msisdn mess)&quot; &quot;(type mess)&quot; &quot;(get mess :msisdn)&quot; &quot;(get mess \&quot;msisdn\&quot;)&quot; &quot;(mess \&quot;msisdn\&quot;)&quot; &quot;(\&quot;msisdn\&quot; mess )&quot; &quot;(defn send_to_kannel\n  [obj]\n  ;;get url from config and populate msisdn value to get url\n  (def details (parse-string obj))\n  (let [url (format config/kannel-url config/kannel-user config/kannel-pass (details \&quot;msisdn\&quot;) (url-encode (details \&quot;message\&quot;)) config/from)]\n    ;;send request\n    (println url)\n    ;;(log/debug url)\n    ;;(req/get url)\n    )\n  )&quot; &quot;(defn send_to_kannel\n  [obj]\n  ;;get url from config and populate msisdn value to get url\n  (def details (parse-string obj))\n  (let [url (format config/kannel-url config/kannel-user config/kannel-pass (details \&quot;msisdn\&quot;) (details \&quot;message\&quot;) config/from)]\n    ;;send request\n    (println url)\n    ;;(log/debug url)\n    ;;(req/get url)\n    )\n  )&quot; &quot;(ns bc-module-kenya.helper-fns\n  ^{:author \&quot;pmuchina@mo-de.com\&quot;}\n  (:require [bc-module-kenya.config :as config]\n            [clojure.tools.logging :as log]\n            [cheshire.core :refer :all]\n            [clj-http.client :as req]\n            [clj-http.uti :as en]\n            )\n  )&quot; &quot;(ns bc-module-kenya.helper-fns\n  ^{:author \&quot;pmuchina@mo-de.com\&quot;}\n  (:require [bc-module-kenya.config :as config]\n            [clojure.tools.logging :as log]\n            [cheshire.core :refer :all]\n            [clj-http.client :as req]\n            [clj-http.util :as en]\n            )\n  )&quot; &quot;(def messgae (generate-string {:session-id 1235 :request-id 123 :msisdn 123 :message \&quot;Hello my old friend\&quot; :flash? false :from \&quot;Airtel\&quot;}))&quot; &quot;(defn send_to_kannel\n  [obj]\n  ;;get url from config and populate msisdn value to get url\n  (def details (parse-string obj))\n  (let [url (format config/kannel-url config/kannel-user config/kannel-pass (details \&quot;msisdn\&quot;) (en/url-encode (details \&quot;message\&quot;)) config/from)]\n    ;;send request\n    (println url)\n    ;;(log/debug url)\n    ;;(req/get url)\n    )\n  )&quot; &quot;(send_to_kannel message)&quot; &quot;1&quot; &quot;(- 2 5)&quot; &quot;(def config-map (read-properties \&quot;C:\\\\Users\\\\pmuchina.MO-DE\\\\Desktop\\\\projects\\\\clojure\\\\bc_module_kenya\\\\bc_module.config\&quot; :required [:db-name :db-ip :db-username :db-password :db-port :poll-interval :channel :timezone :from]))&quot; &quot;(ns\n  ^{:author \&quot;pmuchina@mo-de.com\&quot;}\n  bc-module-kenya.config\n  (:require [clojure.tools.logging :as log]\n            )\n  (:use [propertea.core])\n\n  )&quot; &quot;(def config-map (read-properties \&quot;C:\\\\Users\\\\pmuchina.MO-DE\\\\Desktop\\\\projects\\\\clojure\\\\bc_module_kenya\\\\bc_module.config\&quot; :parse-int [:connection-timeout :validation-timeout :idle-timeout :max-lifetime :minimum-idle :maximum-pool-size :queue_port :start_time :stop_time :timezone :message_limit :country_code :poll-interval] :required [:db-name :db-ip :db-username :db-password :db-port :poll-interval :channel :timezone :from]))&quot; &quot;(log/info config-map)&quot; &quot;(println (type (:poll-interval  config-map)))&quot; &quot;(println (type (:queue_host  config-map)))&quot; &quot;(def map {:subscriber_fk 7258217350, :message_type 1, :amount 70})&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message   :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map))   :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) ({:amount (:amount map) :message_type (:message_type map) :subscriber_fk (:subscriber_fk map)}))  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map2)))))&quot; &quot;(hfns/delocalize_msisdn (:subscriber_fk map))&quot; &quot;(hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) ({:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)}))&quot; &quot;(eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map)))))&quot; &quot;(str \&quot;config/message_\&quot; (str (:message_type map)))&quot; &quot;(:message_type map)&quot; &quot;(:amount map)&quot; &quot;(def map2 {:subscriber-fk 7258217350, :message-type 1, :amount 70})&quot; &quot;(:subscriber_fk map2)&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) ({:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)}))  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn (make_message (first))})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn (first (make_message))})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn identity})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (jdbc/query conn [\&quot;select subscriber_fk, message_type, amount from tbl_sms_tracker_new limit ?\&quot; config/message_limit]\n                {:as-arrays? false :row-fn make_message})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (jdbc/query conn [\&quot;select subscriber_fk, message_type, amount from tbl_sms_tracker_new limit ?\&quot; config/message_limit]\n                {:as-arrays? false :row-fn identity})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (jdbc/query conn [\&quot;select subscriber_fk, message_type, amount from tbl_sms_tracker_new limit ?\&quot; config/message_limit]\n                {:as-arrays? false :row-fn prinln})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (jdbc/query conn [\&quot;select subscriber_fk, message_type, amount from tbl_sms_tracker_new limit ?\&quot; config/message_limit]\n                {:as-arrays? false :row-fn println})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn println})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(def map2 {:subscriber_fk 7258217350, :message_type 1, :amount 70})&quot; &quot;(hfns/delocalize_msisdn (:subscriber_fk map2))&quot; &quot;(hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map2))))) ({:amount (:amount map2) :message-type (:message_type map2) :subscriber-fk (:subscriber_fk map2)}))&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map2))))) {:amount (:amount map2) :message-type (:message_type map2) :subscriber-fk (:subscriber_fk map2)})&quot; &quot;(defn make_message\n  [map]\n  (try\n    (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) '{:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(generate-string {:session-id (:subscriber_fk map2) :request-id (:subscriber_fk map2) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map2)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map2) :message-type (:message_type map2) :subscriber-fk (:subscriber_fk map2)})  :flash? false :from config/from})&quot; &quot;(make_message {:subscriber_fk 72582173501, :message_type 1, :amount 75})&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map)))))  :flash? false :from config/from}) (del_sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map)))))  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(def map2 {:subscriber_fk 72582173501, :message_type 1, :amount 75})&quot; &quot;(defn make_message\n  [map]\n  (try\n    (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(make_message map2)&quot; &quot;(generate-string {:session-id (:subscriber_fk map2) :request-id (:subscriber_fk map2) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map2)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map2))))) {:amount (:amount map2) :message-type (:message_type map2) :subscriber-fk (:subscriber_fk map2)})  :flash? false :from config/from})&quot; &quot;(delete-sub (:subscriber_fk map2))&quot; &quot;(delete-sub {:subscriber_fk (:subscriber_fk map2)})&quot; &quot;(defn make_message\n  [map]\n  (try\n    (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})  :flash? false :from config/from}) (delete-sub {:subscriber_fk (:subscriber_fk map)}) (log/info (str \&quot;Make message - \&quot; (str map))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn make_message\n  [map]\n  (try\n    (generate-string {:session-id (:subscriber_fk map)\n                      :request-id (:subscriber_fk map)\n                      :msisdn (hfns/delocalize_msisdn (:subscriber_fk map))\n                      :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})\n                      :flash? false\n                      :from config/from})\n    (delete-sub! {:subscriber_fk (:subscriber_fk map)})\n    (log/info (str \&quot;Make message - \&quot; (str map)))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e)))\n    )\n  )&quot; &quot;(def conn {:datasource datasource})&quot; &quot;(defqueries \&quot;sql/queries.sql\&quot;\n            {:connection conn})&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n  (-&gt; (jdbc/with-db-connection [conn {:datasource datasource}]\n                           (jdbc/query conn [(str \&quot;select count(*) from information_schema.tables where table_name='tbl_sms_tracker'\&quot;)]))\n      first :count pos?)\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn apply-schema-migration\n  \&quot;Apply the schema to the database\&quot;\n  []\n  (try\n  (when (not (db-schema-migrated?))\n    (app-schema))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn make_message\n  [map]\n  (try\n    (delete-sub! {:subscriber_fk (:subscriber_fk map)})\n    (log/info (str \&quot;Make message - \&quot; (str map)))\n    (generate-string {:session-id (:subscriber_fk map)\n                      :request-id (:subscriber_fk map)\n                      :msisdn (hfns/delocalize_msisdn (:subscriber_fk map))\n                      :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})\n                      :flash? false\n                      :from config/from})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e)))\n    )\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(get_subs)&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n  (-&gt; (jdbc/with-db-connection [conn connection]\n                           (jdbc/query conn [(str \&quot;select count(*) from information_schema.tables where table_name='tbl_sms_tracker'\&quot;)]))\n      first :count pos?)\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(ns bc-module-kenya.db-conn\n  ^{:author \&quot;pmuchina@mo-de.com\&quot;}\n  (:require [bc-module-kenya.config :as config]\n            [hikari-cp.core :refer :all]\n            [clojure.java.jdbc :as jdbc]\n            [clojure.tools.logging :as log]\n            [cheshire.core :refer :all]\n            [bc-module-kenya.helper-fns :as hfns]\n            [yesql.core :refer [defqueries]]\n            )\n  )&quot; &quot;(def datasource-options {:auto-commit        true\n                         :read-only          false\n                         :connection-timeout config/connection-timeout\n                         :validation-timeout config/validation-timeout\n                         :idle-timeout       config/idle-timeout\n                         :max-lifetime       config/max-lifetime\n                         :minimum-idle       config/minimum-idle\n                         :maximum-pool-size  config/maximum-pool-size\n                         :pool-name          \&quot;db-pool\&quot;\n                         ;;:adapter          \&quot;postgresql\&quot; --Mutually exclusive with jdbc-url\n                         :username           config/db-username\n                         :password           config/db-password\n                         :database-name      config/db-ip\n                         :server-name        config/db-name\n                         :port-number        (read-string config/db-port)\n                         :jdbc-url           (str \&quot;jdbc:postgresql://\&quot; config/db-ip \&quot;:\&quot; config/db-port \&quot;/\&quot; config/db-name)\n                         :register-mbeans    false})&quot; &quot;(def datasource\n  (make-datasource datasource-options))&quot; &quot;(def connection {:datasource datasource})&quot; &quot;(defqueries \&quot;sql/queries.sql\&quot;\n            {:connection connection})&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (pos? (check-if-schema-exists))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (check-if-schema-exists)\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (pos? (:count (check-if-schema-exists)))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (:count (check-if-schema-exists))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(check-if-schema-exists)&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (pos? (:count (first (check-if-schema-exists))))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(db-schema-migrated?)&quot; &quot;(jdbc/with-db-transaction [tx connection]\n                            (delete-sub! {:subscriber_fk 72582173503} {:connection tx}))&quot; &quot;(delete-sub! {:subscriber_fk 72582173503})&quot;], :remote []}}</component>
</project>