<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1484936211757">{:repl-history {:ide [], :local [&quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn println})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(def map2 {:subscriber_fk 7258217350, :message_type 1, :amount 70})&quot; &quot;(hfns/delocalize_msisdn (:subscriber_fk map2))&quot; &quot;(hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map2))))) ({:amount (:amount map2) :message-type (:message_type map2) :subscriber-fk (:subscriber_fk map2)}))&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map2))))) {:amount (:amount map2) :message-type (:message_type map2) :subscriber-fk (:subscriber_fk map2)})&quot; &quot;(defn make_message\n  [map]\n  (try\n    (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) '{:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(generate-string {:session-id (:subscriber_fk map2) :request-id (:subscriber_fk map2) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map2)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map2) :message-type (:message_type map2) :subscriber-fk (:subscriber_fk map2)})  :flash? false :from config/from})&quot; &quot;(make_message {:subscriber_fk 72582173501, :message_type 1, :amount 75})&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map)))))  :flash? false :from config/from}) (del_sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn make_message\n  [map]\n  (try\n    (doall (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map)))))  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map)))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(def map2 {:subscriber_fk 72582173501, :message_type 1, :amount 75})&quot; &quot;(defn make_message\n  [map]\n  (try\n    (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})  :flash? false :from config/from}) (delete-sub (:subscriber_fk map)) (log/info (str \&quot;Make message - \&quot; (str map))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(make_message map2)&quot; &quot;(generate-string {:session-id (:subscriber_fk map2) :request-id (:subscriber_fk map2) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map2)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map2))))) {:amount (:amount map2) :message-type (:message_type map2) :subscriber-fk (:subscriber_fk map2)})  :flash? false :from config/from})&quot; &quot;(delete-sub (:subscriber_fk map2))&quot; &quot;(delete-sub {:subscriber_fk (:subscriber_fk map2)})&quot; &quot;(defn make_message\n  [map]\n  (try\n    (do (generate-string {:session-id (:subscriber_fk map) :request-id (:subscriber_fk map) :msisdn (hfns/delocalize_msisdn (:subscriber_fk map)) :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})  :flash? false :from config/from}) (delete-sub {:subscriber_fk (:subscriber_fk map)}) (log/info (str \&quot;Make message - \&quot; (str map))))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn make_message\n  [map]\n  (try\n    (generate-string {:session-id (:subscriber_fk map)\n                      :request-id (:subscriber_fk map)\n                      :msisdn (hfns/delocalize_msisdn (:subscriber_fk map))\n                      :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})\n                      :flash? false\n                      :from config/from})\n    (delete-sub! {:subscriber_fk (:subscriber_fk map)})\n    (log/info (str \&quot;Make message - \&quot; (str map)))\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e)))\n    )\n  )&quot; &quot;(def conn {:datasource datasource})&quot; &quot;(defqueries \&quot;sql/queries.sql\&quot;\n            {:connection conn})&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n  (-&gt; (jdbc/with-db-connection [conn {:datasource datasource}]\n                           (jdbc/query conn [(str \&quot;select count(*) from information_schema.tables where table_name='tbl_sms_tracker'\&quot;)]))\n      first :count pos?)\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn make_message\n  [map]\n  (try\n    (delete-sub! {:subscriber_fk (:subscriber_fk map)})\n    (log/info (str \&quot;Make message - \&quot; (str map)))\n    (generate-string {:session-id (:subscriber_fk map)\n                      :request-id (:subscriber_fk map)\n                      :msisdn (hfns/delocalize_msisdn (:subscriber_fk map))\n                      :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})\n                      :flash? false\n                      :from config/from})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e)))\n    )\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n  (-&gt; (jdbc/with-db-connection [conn connection]\n                           (jdbc/query conn [(str \&quot;select count(*) from information_schema.tables where table_name='tbl_sms_tracker'\&quot;)]))\n      first :count pos?)\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (pos? (check-if-schema-exists))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (check-if-schema-exists)\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (pos? (:count (check-if-schema-exists)))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (:count (check-if-schema-exists))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(check-if-schema-exists)&quot; &quot;(db-schema-migrated?)&quot; &quot;(jdbc/with-db-transaction [tx connection]\n                            (delete-sub! {:subscriber_fk 72582173503} {:connection tx}))&quot; &quot;(delete-sub! {:subscriber_fk 72582173503})&quot; &quot;(defn make_message\n  [map]\n  (try\n    ;;(delete-sub! {:subscriber_fk (:subscriber_fk map)})\n    ;; How to incorporate DB transactions when using YESQL\n    (jdbc/with-db-transaction [tx connection]\n                              (delete-sub! {:subscriber_fk (:subscriber_fk map)} {:connection tx}))\n    (log/info (str \&quot;Make message - \&quot; (str map)))\n    (generate-string {:session-id (:subscriber_fk map)\n                      :request-id (:subscriber_fk map)\n                      :msisdn (hfns/delocalize_msisdn (:subscriber_fk map))\n                      :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})\n                      :flash? false\n                      :from config/from})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e)))\n    )\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (jdbc/with-db-transaction [tx connection]\n                              (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message}))\n    ;;(get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    (jdbc/with-db-transaction [tx connection]\n                              (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn identity}))\n    ;;(get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(jdbc/with-db-transaction [tx connection]\n                            (func))&quot; &quot;(jdbc/with-db-transaction [tx connection]\n                            (function))&quot; &quot;(jdbc/with-db-transaction [tx connection]\n                            '(function))&quot; &quot;(defn as-db-transaction\n  [function connection]\n  (jdbc/with-db-transaction [tx connection]\n                            '(function))\n  )&quot; &quot;(defn db-schema-migrated?\n  \&quot;Check if the schema has been created in database\&quot;\n  []\n  (log/info \&quot;Checking if required schema exists\&quot;)\n  (try\n    (pos? (:count (first (check-if-schema-exists))))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn apply-schema-migration\n  \&quot;Apply the schema to the database\&quot;\n  []\n  (try\n  (when (not (db-schema-migrated?))\n    (app-schema))\n  (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn make_message\n  [map]\n  (try\n    ;;(delete-sub! {:subscriber_fk (:subscriber_fk map)})\n    ;; How to incorporate DB transactions when using YESQL\n    (as-db-transaction (delete-sub! {:subscriber_fk (:subscriber_fk map)}) connection)\n    #_(jdbc/with-db-transaction [tx connection]\n                              (delete-sub! {:subscriber_fk (:subscriber_fk map)} {:connection tx}))\n    (log/info (str \&quot;Make message - \&quot; (str map)))\n    (generate-string {:session-id (:subscriber_fk map)\n                      :request-id (:subscriber_fk map)\n                      :msisdn (hfns/delocalize_msisdn (:subscriber_fk map))\n                      :message (hfns/get-message (eval (symbol (str \&quot;config/message_\&quot; (str (:message_type map))))) {:amount (:amount map) :message-type (:message_type map) :subscriber-fk (:subscriber_fk map)})\n                      :flash? false\n                      :from config/from})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e)))\n    )\n  )&quot; &quot;(defn as-db-transaction\n  [function connection]\n  (jdbc/with-db-transaction [tx connection]\n                            (function))\n  )&quot; &quot;(defn as-db-transaction\n  [function connection]\n  (jdbc/with-db-transaction [tx connection]\n                            (function {:connection connection}))\n  )&quot; &quot;(as-db-transaction (delete-sub! {:subscriber_fk (:subscriber_fk map)}) connection)&quot; &quot;(defn as-db-transaction\n  [function]\n  (jdbc/with-db-transaction function)\n  )&quot; &quot;(defn as-db-transaction\n  [function]\n  (jdbc/with-db-transaction 'function)\n  )&quot; &quot;(defmacro as-db-transaction\n  [function]\n  (jdbc/with-db-transaction 'function)\n  )&quot; &quot;(defmacro as-db-transaction\n  [function]\n  (jdbc/with-db-transaction function)\n  )&quot; &quot;(defmacro as-db-transaction\n  [function]\n  (jdbc/with-db-transaction '(function))\n  )&quot; &quot;(defmacro as-db-transaction\n  [function]\n  `(jdbc/with-db-transaction function)\n  )&quot; &quot;(defmacro as-db-transaction\n  [function]\n  (list jdbc/with-db-transaction function)\n  )&quot; &quot;(defmacro as-db-transaction\n  [function]\n  (list jdbc/with-db-transaction (list function))\n  )&quot; &quot;(defmacro as-db-transaction\n  [args]\n  (jdbc/with-db-transaction (list args))\n  )&quot; &quot;(list (delete-sub! {:subscriber_fk 72582173503}))&quot; &quot;(list (\&quot;delete-sub!\&quot; {:subscriber_fk 72582173503}))&quot; &quot;(jdbc/with-db-transaction [tx connection]\n                              (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn identity}))&quot; &quot;(list reverse \&quot;Hello World\&quot;)&quot; &quot;'(list reverse \&quot;Hello World\&quot;)&quot; &quot;(defmacro as-db-transaction\n  [args]\n  (list jdbc/with-db-transaction args)\n  )&quot; &quot;(macroexpand '(as-db-transaction))&quot; &quot;(macroexpand '(as-db-transaction (delete-sub! {:subscriber_fk 72582173503})))&quot; &quot;(macroexpand '(as-db-transaction args))&quot; &quot;(defn as-db-transaction\n  [args]\n  (jdbc/with-db-transaction args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args]\n  (jdbc/with-db-transaction args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args]\n  '(jdbc/with-db-transaction 'args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args]\n  '(jdbc/with-db-transaction args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args]\n  '(jdbc/with-db-transaction ~args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args]\n  `(jdbc/with-db-transaction ~@args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-connection args-func]\n  `(jdbc/with-db-transaction ~args-connection ~args-func)\n  )&quot; &quot;(jdbc/with-db-transaction (delete-sub! {:subscriber_fk (:subscriber_fk map)}))&quot; &quot;(jdbc/with-db-transaction [tx connection]\n                              (delete-sub! {:subscriber_fk (:subscriber_fk map)}))&quot; &quot;(log/info (str \&quot;Make message - \&quot; (str map)))&quot; &quot;(ns bc-module-kenya.db-conn\n  ^{:author \&quot;pmuchina@mo-de.com\&quot;}\n  (:require [bc-module-kenya.config :as config]\n            [hikari-cp.core :refer :all]\n            [clojure.java.jdbc :as jdbc]\n            [clojure.tools.logging :as log]\n            [cheshire.core :refer :all]\n            [bc-module-kenya.helper-fns :as hfns]\n            [yesql.core :refer [defqueries]]\n            )\n  )&quot; &quot;(def datasource-options {:auto-commit        true\n                         :read-only          false\n                         :connection-timeout config/connection-timeout\n                         :validation-timeout config/validation-timeout\n                         :idle-timeout       config/idle-timeout\n                         :max-lifetime       config/max-lifetime\n                         :minimum-idle       config/minimum-idle\n                         :maximum-pool-size  config/maximum-pool-size\n                         :pool-name          \&quot;db-pool\&quot;\n                         ;;:adapter          \&quot;postgresql\&quot; --Mutually exclusive with jdbc-url\n                         :username           config/db-username\n                         :password           config/db-password\n                         :database-name      config/db-ip\n                         :server-name        config/db-name\n                         :port-number        (read-string config/db-port)\n                         :jdbc-url           (str \&quot;jdbc:postgresql://\&quot; config/db-ip \&quot;:\&quot; config/db-port \&quot;/\&quot; config/db-name)\n                         :register-mbeans    false})&quot; &quot;(def datasource\n  (make-datasource datasource-options))&quot; &quot;(def connection {:datasource datasource})&quot; &quot;(defqueries \&quot;sql/queries.sql\&quot;\n            {:connection connection})&quot; &quot;(defmacro as-db-transaction\n  [args]\n  `(jdbc/with-db-transaction ~args)\n  )&quot; &quot;(as-db-transaction (delete-sub! {:subscriber_fk 72582173503}))&quot; &quot;(jdbc/with-db-transaction [tx connection]\n                              (delete-sub! {:subscriber_fk (:subscriber_fk map)} {:connection tx}))&quot; &quot;(jdbc/with-db-transaction (delete-sub! {:subscriber_fk 72582173503}))&quot; &quot;(jdbc/with-db-transaction [connection]\n                              (delete-sub! {:subscriber_fk 72582173503}))&quot; &quot;(jdbc/with-db-transaction [tx connection]\n                              (delete-sub! {:subscriber_fk 72582173503}))&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  `(jdbc/with-db-transaction [tx args-conn] args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  `(jdbc/with-db-transaction [tx ~args-conn] args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  `(jdbc/with-db-transaction ['tx ~args-conn] ~args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  `(jdbc/with-db-transaction [~tx ~args-conn] ~args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  '(jdbc/with-db-transaction [tx ~args-conn] ~args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  '(jdbc/with-db-transaction [tx args-conn] args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [[args-conn args]]\n  (list jdbc/with-db-transaction [tx args-conn] args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  (jdbc/with-db-transaction [tx args-conn] args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  ('jdbc/with-db-transaction [tx args-conn] args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  ('jdbc/with-db-transaction ['tx args-conn] args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  `(jdbc/with-db-transaction [tx ~args-conn] ~args)\n  )&quot; &quot;(defmacro as-db-transaction\n  [args-conn args]\n  (list 'jdbc/with-db-transaction ['tx args-conn] args)\n  )&quot; &quot;(as-db-transaction connection (delete-sub! {:subscriber_fk 72582173503}))&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    #_(jdbc/with-db-transaction [tx connection]\n                              (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message}))\n  (as-db-transaction connection (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message}))\n    ;;(get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(defn get_subs\n  []\n  (log/info \&quot;Getting subs\&quot;)\n  (try\n    #_(jdbc/with-db-transaction [tx connection]\n                              (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message}))\n  (as-db-transaction connection (get-subs {:limit config/message_limit} {:as-arrays? false :row-fn identity}))\n    ;;(get-subs {:limit config/message_limit} {:as-arrays? false :row-fn make_message})\n    (catch Exception e (str \&quot;caught exception: \&quot; (.getMessage e))))\n  )&quot; &quot;(get_subs)&quot;], :remote []}}</component>
</project>